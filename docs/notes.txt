{:ok, vessels} = ShipSim.JSONFetch.fetch("test/TestData.json")
ShipSim.DaysRun.days_run(vessels)

vessels["vessels"]

Enum.find(vessels["vessels"], &( &1["name"]=="Vessel 3" ))

Enum.each(vessels["vessels"], &( 
    vesselname = &1["name"]
    positions = &1["positions"]
    [firstposition|lastpositions] = positions
    firsttime = firstposition["timestamp"]
    firstx = firstposition["x"]
    firsty = firstposition["y"]
    distance = Enum.reduce(lastpositions, {0, {firstx,firsty}, 0, firsttime},
      &(
        timestamp = &1["timestamp"]
        x = &1["x"]
        y = &1["y"]
      )
    )
  )
)

distance(x1, y1, x2, y2)
	def distance({x1, y1}, {x2, y2}) do
		:math.sqrt(
			:math.pow(Math.abs(x1 - x2), 2) +
			:math.pow(Math.abs(y1 - y2), 2)
		)
	end

-	Average speed in km/h
-	Total distance travelled in km

time(t1, t2)

iex(2)> Timex.parse("2020-01-01T07:55Z", "{ISO:Extended:Z}")
{:ok, #<DateTime(2020-01-01T07:55:00Z Etc/UTC)>}

{:ok, dt1} = Timex.parse("2020-01-01T07:55Z", "{ISO:Extended:Z}")
{:ok, dt2} = Timex.parse("2020-01-01T07:56Z", "{ISO:Extended:Z}")
DateTime.diff(dt2, dt1, :second)
t 
** (UndefinedFunctionError) function DateTime.diff/2 is undefined or private
    (elixir) DateTime.diff(#<DateTime(2020-01-01T07:55:00Z Etc/UTC)>, #<DateTime(2020-01-01T07:56:00Z Etc/UTC)>)

    result_map = Enum.reduce(positions, %{index: 0, position: positions[0], first_time},
      fn position ->
      end
    )

        IO.puts "#{next_lower_position["x"]}"
        IO.puts "#{next_higher_position["x"]}"
        IO.puts "#{next_lower_position["y"]}"
        IO.puts "#{next_higher_position["y"]}"
        IO.puts "#{leg_delta_x}"
        IO.puts "#{leg_delta_y}"
        IO.puts "#{run_delta_x}"
        IO.puts "#{run_delta_y}"
        IO.puts "#{run_x}"
        IO.puts "#{run_y}"
        IO.puts "#{time_ratio}"

